Netty最核心的就是reactor线程，对应的是项目中的NIOEventLoop，那么NioEventLoop里面到底是在干什么事情？netty是如何保证事件循环的高效轮询和任务的及时执行？又是如何优雅地fix掉jdk的nio bug？带着这些疑问，来逐步了解netty reactor线程得真相。

reactor线程的启动
NioEventLoop的run方法是reactor线程的主体。在第一次添加任务的时候被启动
NioEventLoop的父类SingleThreadEventExecutor的 execute()方法，外部线程在往任务队列里面添加任务的时候，netty会判断reactor线程有没有被启动，如果没有被启动，那就执行startThread()来启动线程再往任务队列里面添加任务，
SingleThreadEventExecutor在执行都StartThread的时候，会调用内部执行器executor的execute方法，将                       调用NioEventLoop的run方法 的过程 封装成一个runnable 塞到 一个线程中 去执行，该线程就是executor创建的，对应netty的reactor线程实体。
//下面这一段，不太明确
executor默认是 ThreadPerTaskExecutor    默认情况下，ThreadPerTaskExecutor在每次执行execute方法的时候都会通过DefaultThreadFactory创建一个FastThreadLocalThread线程，而这个线程 就是netty中的reactor线程实体。关于为啥是通过 ThreadPerTaskExecutor 和 DefaultThreadFactory的组合 来new一个FastThreadLocalThread，这里就不再详细描述，通过下面几段代码来简单说明
上面是关于reactor线程得创建和启动，总结一下：Netty的reactor线程在添加一个任务的时候被创建，该线程实体为FastThreadLocalThread，最后线程执行主体为NioEventLoop的run方法。

reactor线程的执行
抽取出主干，reactor线程做的事情其实很简单，大概可分为三个步骤不断循环：
1.首先轮询注册到reactor线程对应的selector上的所有的channel的IO事件
select(wakenUp.getAndSet(false));
if (wakenUp.get()) {
    selector.wakeup();
}
2.处理产生网络IO事件的channel
processSelectedKeys();
3.处理任务队列
runAllTasks(...);
下面是对每个步骤的详细说明
select操作
wakeup表示是否应该唤醒正在阻塞的select操作，可以看到netty在进行一次新的loop之前，都会将wakeUp设置成false，标志新的一轮loop的开始，下面将select操作，拆分来看
  1.定时任务截止时间快到了，终止本次轮询：NioEventLoop中reactor线程得select操作也是一个for循环，在for循环第一步中，如果发现当前的定时任务队列中有任务的截止时间快到了(<=0.5ms)，就跳出循环。此外，跳出之前如果发现目前为止还没有进行过select操作(if(selectCnt==0))，那么久调用一次selectNow()，该方法会立即返回，不会阻塞。另外，netty里面定时任务队列是按照延迟时间从小到大进行排序的，delayNanos(currentTimeNanos)方法是取出第一个定时任务的延迟时间。
  2.轮询过程中发现有任务加入，中断本次轮询：netty为了保证任务队列能够及时执行，在进行阻塞select操作的时候会判断队列是否为空，如果不为空，就执行一次非阻塞select操作，跳出循环。
  3.阻塞式select操作：执行到这一步，说明netty队列任务里面队列为空，并且所有定时任务延迟时间还未到，(大于0.5ms)，于是，在这里进行一次select操作哦，截止到第一个定时任务的截止时间。这里如果第一个定时任务的延迟非常大，比如一个小时，那么就有可能线程一直阻塞在select操作，但是，只要这段时间内有新的任务加入，该阻塞就会被释放。
在外部线程添加任务的时候，会调用wakeup方法来唤醒，阻塞select操作结束之后，netty又做了一系列的状态来决定是否中断本次轮询，中断本次轮询的条件有：轮询到IO时间；oldWakenUp参数为true；任务队列里面有任务；第一个定时任务即将要被执行；用户主动唤醒
  4.解决jdk的nio bug ：该bug会到时Selector一直空轮询，最终导致cpu100%，nio server 不可用，严格意义上来说，netty没有解决jdk的bug，而是通过一种方式来巧妙地避开了这个bug，具体做法如下：
netty会在每次进行selector.select(timeoutMillis)之前记录一下开始时间，在select结束之后记录一下结束时间，判断select操作是否至少持续了(timeoutMillis)秒，如果持续时间大于(timeoutMillis)，说明是一次有效轮询，重置selectCnt标志，否则表明可能触发了jdk的空轮询bug，当空轮询次数超过一个阀值的时候，默认512，就开始重建selector。首先，通过openSelector()方法创建一个新的selector，然后执行一个死循环，只要执行过程中出现过一次并发修改selectionKeys异常，就重新开始转移：首先拿到有效的key；然后取消该key在旧的selector上的事件注册；接下来将该key对应的channel注册到新的selector上；最后重新绑定channel和新的key的关系。转移完成之后，就可以将原有的selector废弃，后面所有的轮询都是在新的selector进行。总结reactor线程select步骤做的事情：不断地轮询是否有IO事件发生，并且在轮询的过程中不断检查是否有定时任务和普通任务，保证了netty的任务队列中的任务得到有效执行，轮询过程顺带用了一个计数器避开了jdk空轮询的bug。

netty的 reactor线程的第一步是轮询出祖册在selector上面的IO事件(select)，接下来就是要处理这些IO事件(process selected keys)。

reactor线程第三曲，netty的task机制总结：
1.当前reactor线程调用当前eventLoop执行任务，直接执行，否则，添加到任务队列稍后执行
2.netty内部的任务分为普通任务和定时任务，分别落地到MpscQueue和PriorityQueue
3.netty每次执行任务循环之前，会将已经到期的定时任务从priorityQueue转移到MpscQueue
4.netty每隔64个任务检查一下是否该退出任务循环


reactor线程的创建启动，线程的执行，线程任务的执行

netty源码分析之pipeline(一)
netty在服务端端口绑定和新连接建立的过程中会建立相应的channel，

netty源码分析之pipeline(二)
一：Unsafe到底是干什么的
之所以Unsafe放到pipeline中讲，是因为unsafe和pipeline密切相关，pipeline中的有关io的操作最终都是落地到unsafe。顾名思义，unsafe是不安全的意思，就是告诉你不要在应用程序里面直接使用Unsafe以及他的衍生类对象。







































































































































































































































































































