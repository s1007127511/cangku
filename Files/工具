================判断两个类的某些字段的值是否一样================
    //判断两个对象各字段值是否一样
    //如果两个对象对应字段的值不一样，则返回true，否则返回false
    private boolean compareTwoObject(Object obj1, Object obj2, String[] contrastFields) throws IllegalAccessException {
        List<String> contrastFieldList = Arrays.asList(contrastFields);
        Class<?> clazz1 = obj1.getClass();
        Class<?> clazz2 = obj2.getClass();
        Field[] fields1 = clazz1.getDeclaredFields();
        Field[] fields2 = clazz2.getDeclaredFields();
        BiPredicate biPredicate = (object1, object2) -> {
            if (object1 == null && object2 == null) {
                return true;
            }
            if (object1 == null ^ object2 == null) {
                return false;
            }
            // 假如还有别的类型需要特殊判断 比如 BigDecimal, 演示，只写BigDecimal示例，其他都相似
            if (object1 instanceof BigDecimal && object2 instanceof BigDecimal) {
                return ((BigDecimal) object1).compareTo((BigDecimal) object2) == 0;
            }

            return object1.equals(object2);
        };

        for (Field field1 : fields1) {
            for (Field field2 : fields2) {
//                contrastFieldList
                if (contrastFieldList.contains(field1.getName()) && contrastFieldList.contains(field2.getName())) {
                    if (field1.getName().equals(field2.getName())) {
                        field1.setAccessible(true);
                        field2.setAccessible(true);
                        if (!biPredicate.test(field1.get(obj1), field2.get(obj2))) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
================前台按字段分组后排序================
/**
             * 将数组分组后排序
             * @param list 数组
             * @param filed1 数组分组的依据字段
             * @param filed2 数组组内排序的依据字段
             * @param lastFiledValue 数组分组时排在最后的依据字段（unit为""，即不足量）
             * @returns 排序后的数组
             */
            groupingAndCompare(list,filed1,filed2,lastFiledValue){
                let cloneList = this.$clone(list);
                let resultList = [];
                resultList = this.grouping(cloneList,filed1,filed2,resultList);
                for (let index in resultList) {
                    if (resultList[index][filed2] === lastFiledValue){
                        const tempItem = resultList[index];
                        resultList.splice(index,1);
                        resultList.push(tempItem);
                        break;
                    }
                }
                return resultList;
            },
            /**
             *
             * @param cloneList 需要分组排序的列表
             * @param filed1 数组分组的依据字段
             * @param filed2 数组组内排序的依据字段
             * @param resultList 分完类的每组集合
             * @returns 就是resultList
             */
            grouping(cloneList,filed1,filed2,resultList){
                let list3 = [];
                let filedName = undefined;
                for (let i = 0; i < cloneList.length; i){
                    if (filedName === undefined || filedName === cloneList[i][filed1]){
                        filedName = cloneList[i][filed1];
                        list3.push(cloneList[i]);
                        cloneList.splice(i,1);
                    }else if (filedName !== cloneList[i][filed1]){
                        i++;
                    }
                    if(i === cloneList.length && cloneList.length > 0){
                        //tempList 以filed1分组后的集合
                        const tempList = this.grouping(cloneList,filed1,filed2,resultList);
                        //将分组后的以filed2排序
                        list3.sort(this.compare(filed2));
                        resultList = list3.concat(tempList);
                        return resultList;
                    }else if(cloneList.length === 0){
                        list3.sort(this.compare(filed2));
                        return list3;
                    }
                }
            },
            //比较数组中attr字段的大小
            compare(attr){
                return function (a,b) {
                    var val1 = a[attr];
                    var val2 = b[attr];
                    if (val1 === "" || val2 === ""){
                        return 0;
                    }else {
                        return val1-val2;
                    }
                }
            },