什么是分布式系统：分布式系统是由一组 通过网络进行通信、为了完成共同的任务而协调工作的 计算机节点 组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。
首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算，存储任务的时候，且硬件的提升昂贵到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统，因为，分布式系统要解决的问题本身就是和单机系统一样的，而且由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多机制、协议，带来更多问题。在很多文章中，主要讲分布式系统分为分布式计算（computation）与分布式存储（storage）。计算与存储是相辅相成的，计算需要数据，要么来自实时数据（流数据），要么来自存储的数据；而计算的结果也是需要存储的。在操作系统中，对计算与存储有非常详尽的讨论，分布式系统只不过将这些理论推广到多个节点罢了。分布式系统就是通过分片(paritition)的思想，将这些任务发到多个计算机节点。对于计算，那么就是对计算任务进行切换，每个节点算一些，最终汇总就行了，这就是MapReduce的思想；对于存储，更好理解，每个节点存一部分数据就行了，当数据规模变大的时候Partition是唯一的选择，同事也会带来一些好处：(1)提升性能和并发，操作被分发到不同的分片，相互独立(2)提升系统的可用性，即使部分分片不能用，其他分片也不会受到影响。
理想的情况下，有分片就行了，但事实的情况却不大理想，原因是，分布式系统中有大量的节点，且通过网络通信，单个节点的故障是个小概率时间，但整个系统的故障会随着节点的增加而指数级的增加，网络通信也可能出现断网、高延迟等情况，在这种异常情况下，分布式系统还是需要继续稳定的对外提供服务，就需要较强的容错性。最简单的办法就是使用冗余或者复制集，即多个节点负责同一个任务，最常见的就是分布式存储中，多个节点负责存储同一份数据，以此增强可用性和可靠性。同时，Replication也会带来性能的提升，比如数据的locality可以减少用户的等待时间。
Partition和Replication是解决分布式系统问题的组合拳，很多具体的问题都可以用这个思路去解决。但是往往为了解决一个问题会引入更多的问题，比如为了可用性与可靠性保证，引入了冗余。有了冗余，各个副本之间的一致性问题就变得很头疼，如果要保证强一致性，就会影响可用性和性能，在一些应用中(如电商、搜索)是难以接受的。如果是最终一致性，那么就要处理数据冲突的情况。在分布式系统中，没有最佳的选择，都是需要权衡，做出最合适的选择。
分布式系统的挑战：
分布式系统需要大量机器协作，面临诸多挑战：
第一，异构的机器与网络：分布式系统中的机器，配置不一样，其上运行的服务也可能由不同的语言、架构实现，因此处理能力也不一样；节点间通过网络连接，而不同网络运营商提供的网络的带宽、延时、丢包率吧也不一样。很难保证大家齐头并进、共同完成目标。
第二，普遍的节点故障：虽然单个节点的故障概率较低，但节点数目到达一定规模，出故障的概率就变高了。分布式系统需要保证发生故障的时候，系统仍然可用，这就需要监控节点的状态，在节点故障的时候将该节点负责的计算、存储任务转移到其他节点。
第三，不可靠的网络：节点间通过网络通信，但是网络是不可靠的，有诸多问题，可能的网络问题包括：网络分割、延时、丢包、乱序。相比单机过程调用，网络通信最让人头疼的是超时：节点A向节点B发出请求，在约定的时间内没有收到节点B的响应，那么B是否处理了请求，这个是不确定的，这个不确定会带来诸多问题，最简单的，是否要重试请求，节点B会不会多次处理同一个请求。
总之，分布式的挑战来自不确定性，不确定计算机什么时候crash、断电、不确定磁盘什么时候损坏，不确定每次网络通信要延迟多久，也不确定通信对端是否处理了发送的消息。而分布式的规模放大了这个不确定性，不确定性是令人讨厌的，所以有诸多的分布式理论、协议来保证在这种不确定性的情况下，系统还能继续正常工作。
分布式系统特性与衡量标准
透明性：使用分布式系统的用户并不关心系统是怎么实现的，也不关心读到的数据来自哪个节点，对用户而言，分布式系统的最高境界是用户根本感知不到这是一个分布式系统。
可扩展性：分布式系统的根本目的就是为了处理单个计算机无法处理的任务，当任务增加的时候，分布式系统的处理能力需要随之增加。简单来说，就是要比较方便的通过增加机器来应对数据量的增长，同时，当任务规模缩减的时候，可以撤掉一部分多余的机器，达到动态伸缩的效果。
可用性和可靠性：分布式系统需要长时间提供服务的，可用性是指在各种情况对外提供服务的能力，简单来说，可以通过不可用时间与正常服务时间的比来衡量；可靠性是指计算结果的正确，存储数据的不丢失。
高性能：不管是单机还是分布式系统，都很关注性能，不同的系统对性能的衡量指标是不同的，最常见的：高并发，单位时间内处理的任务越多越好；低延迟：每个任务的平均时间越少越好。这个其实跟操作系统CPU的调度策略很像
一致性：分布式系统为了提高可用性和可靠性，一般会引入冗余。那么如何保证这些节点上的状态一致，就是分布式系统不得不面对的一致性问题，一致性有很多等级，一致性越强，对用户越友好，但是会制约系统的可用性；一致性等级越低，用户就需要兼容数据不一致的情况，但是系统的可用性、并发性会高很多。
组件、理论、协议
假设这是一个对外提供服务的大型分布式系统，用户连接到系统，做一些操作，产生一些需要储存的数据，那么在这个过程中，会遇到哪些组件、理论与协议呢
用一个请求串起来
用户使用Web、APP、SDK，通过HTTP、TCP连接到系统。在分布式系统中，为了高并发、高可用，一般都是多个节点提供相同的服务。那么，第一个问题就是要具体选择哪个节点来提供服务，这就是负载均衡。负载均衡的思想很简单，但是使用很广泛，在分布式系统、大型网站的方方面面都有使用，或者说，只要涉及到多个节点提供同质的服务，就需要负载均衡。






　　回到用户请求这个点，请求操作会产生一些数据、日志，通常为信息，其他一些系统可能会对这些消息感兴趣，比如个性化推荐、监控等，这里就抽象出了两个概念，消息的生产者与消费者。那么生产者怎么讲消息发送给消费者呢，RPC并不是一个很好的选择，因为RPC肯定得指定消息发给谁，但实际的情况是生产者并不清楚、也不关心谁会消费这个消息，这个时候消息队列就出马了。简单来说，生产者只用往消息队列里面发就行了，队列会将消息按主题（topic）分发给关注这个主题的消费者。消息队列起到了异步处理、应用解耦的作用。

1、强一致性：在任何时刻所有的用户或者进程查询到的都是最近一次成功更新的数据。强一致性是程度最高一致性要求，也是最难实现的。关系型数据库更新操作就是这个案例。

2、最终一致性：和强一致性相对，在某一时刻用户或者进程查询到的数据可能都不同，但是最终成功更新的数据都会被所有用户或者进程查询到。当前主流的nosql数据库都是采用这种一致性策略。